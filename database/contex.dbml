// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs
// https://dbdiagram.io/d

Table users {
  id integer (10) [primary key]
  phone integer (11) [not null, unique]
  name varchar (255)
  surname varchar (255)
  last_name varchar (255)
  date_create timestamp
  date_update timestamp
}
Table posts {
  id integer (18) [primary key]
  user_id integer [not null]
  date timestamp
  description varchar (2000)
  geolocation varchar (255)
  is_deleted integer (1)
  date_create timestamp
  date_update timestamp
}
Table images {
  id integer (18) [primary key]
  name varchar (255)
  is_deleted integer (1)
  date_create timestamp
  date_update timestamp
}
Table images_posts {
  id integer (18) [primary key]
  images_id integer (18)
  posts_id integer (18)
  date_create timestamp
  date_update timestamp
}
Table likes_posts {
  id integer (30) [primary key]
  images_id integer (18)
  posts_id integer (18)
  user_id integer (10)
  date_create timestamp
  date_update timestamp
}
Table comments {
  id integer (30) [primary key]
  user_id integer (10) [not null]
  date timestamp
  description varchar (2000)
  is_deleted integer (1)
  posts_id integer (18)
  date_create timestamp
  date_update timestamp
}
Table subscription {
  id integer [primary key]
  user_id integer (10) [not null]
  user_subscription_id integer (10) [not null]
  date_create timestamp
  date_update timestamp
}
Table places {
  id integer (10) [primary key]
  posts_id integer (18)
  name varchar (255)
  date_create timestamp
  date_update timestamp
}

Ref: "posts"."id" < "images_posts"."posts_id"
Ref: "images"."id" < "images_posts"."images_id"
Ref: "users"."id" < "posts"."user_id"
Ref: "posts"."id" < "likes_posts"."posts_id"
Ref: "users"."id" < "likes_posts"."user_id"
Ref: "comments"."user_id" > "users"."id"
Ref: "posts"."id" < "comments"."posts_id"
Ref: "subscription"."user_id" < "users"."id"
Ref: "subscription"."user_subscription_id" < "users"."id"
Ref: "posts"."id" > "places"."posts_id"